/*
 * GenList.h
 *
 *  Created on: 2015年8月2日
 *      Author: juanecho
 */

#ifndef HEADER_4_GENLIST_H_
#define HEADER_4_GENLIST_H_
#include<iostream>
#include<assert.h>
#include<stdlib.h>
using namespace std;
template <typename T>
struct Items{
	int utype;
	union{
		int ref; //utype = 0, 附加头结点，存放引用计数
		T value;//utype = 1,存放数值
		GenListNode<T> *hlink;//utype = 2,存放指向子表的指针
	}info;
	Items():utype(0),info.ref(0){}
	Items(Items<T>& RL){utype = RL.utype; info = RL.info;}
};

template <typename T>
struct GenListNode{
public:
	GenListNode():utype(0),tlink(NULL),info.ref(0){}
	GenListNode(GenListNode<T>& RL)
	{
		utype = RL.utype;
		tlink = RL.tlink;
		info = RL.info;
	}
private:
	int utype;
	GenListNode<T>*tlink;
	union{
		int ref;
		T value;
		GenListNode<T>* hlink;
	}info;
};

template <typename T>
class GenList{
public:
	GenList();
	~GenList();
	bool Head(Items& x);
	bool Tail(GenList<T>& it);
	GenListNode<T>*First();
	GenListNode<T>*Next(GenListNode<T>*elem);
	void Copy(const GenList<T>& R);
	int length();
	int depth();
	friend istream& operator>>(istream& in, GenList<T>& L);
private:
	GenListNode<T>* first;
	GenListNode<T>*Copy(GenListNode<T>*ls);
	//复制一个ls指示的无共享非递归表
	int Length(GenListNode<T>* ls);
	int depth(GenListNode<T>* ls);
	bool equal(GenListNode<T>*s,GenListNode<T>*t);
	void Remove(GenListNode<T>* ls);
	void Createlist(istream& in, GenListNode<T>*& ls);
};


#endif /* HEADER_4_GENLIST_H_ */
