/*
 * LeetCode005.cpp
 *
 *  Created on: 2015年8月4日
 *      Author: juanecho
 */
#include "leetcode.h"

class Solution {
public:
	int maxProfit(vector<int>& prices) {
		int size = prices.size();
		if (size <= 1)
			return 0;
		int min = prices[0], minIndex = 0;
		int max = 0, maxBegin = 0, maxEnd = 0, maxB = 0, k = 0;
		//----
		int minE = prices[0];
		int maxE = 0, maxFirst = 0, maxSecond = 0;
		//---
		int i = 0;
		while (i < size) {
			//
			maxB = prices[maxEnd] - prices[maxBegin];
			if (prices[i] - minE >= maxE) {
				maxE = prices[i] - minE;
			} else {
				cout << "i---" << i << " maxE = " << maxE << "  maxB = " << maxB
						<< endl;
				if (maxB > maxSecond && maxBegin == minIndex) {
					maxSecond = maxB;
				}
				if (maxE + maxB >= maxFirst + maxSecond) {
					maxFirst = maxB;
					maxSecond = maxE;
				}
				cout << "i---" << i << " maxFirst = " << maxFirst
						<< "  maxSecond = " << maxSecond << endl;
				minE = prices[i];
				maxE = 0;
				while (k <= i) {
					if (prices[k] - min >= max) {
						maxBegin = minIndex;
						max = prices[k] - min;
						maxEnd = k;
					}
					if (prices[k] <= min) {
						min = prices[k];
						minIndex = k;
					}
					k++;
				}
			}
			i++;
		}
		cout << "e---" << i << " maxE = " << maxE << "  maxB = " << maxB
				<< endl;
		cout << "e---" << i << " maxFirst = " << maxFirst << "  maxSecond = "
				<< maxSecond << endl;
		if (maxB > maxSecond && maxBegin == minIndex) {
			maxSecond = maxB;
		}
		if (maxE + maxB >= maxFirst + maxSecond) {
			maxFirst = maxB;
			maxSecond = maxE;
		}
		cout << "e---" << i << " maxE = " << maxE << "  maxB = " << maxB
				<< endl;
		cout << "e---" << i << " maxFirst = " << maxFirst << "  maxSecond = "
				<< maxSecond << endl;
		return maxFirst + maxSecond;
	}
};

int main() {
	Solution * s = new Solution();
	vector<int> tem;
	int nums[] = { 1,7,4,2};//8, 3};//, 6, 2, 8, 8, 8, 4, 2, 0, 7, 2, 9, 4, 9 };
	for (int i = 0; i < 4; i++) {
		tem.push_back(nums[i]);
	}
	cout << s->maxProfit(tem) << endl;
	return 0;
}
