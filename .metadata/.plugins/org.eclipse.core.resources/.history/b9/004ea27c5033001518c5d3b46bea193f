/*
 * LinkNode.h
 *
 *  Created on: 2015年7月26日
 *      Author: juanecho
 */

#ifndef HEADER_LINKEDLIST_H_
#define HEADER_LINKEDLIST_H_
#include <iostream>
#include "../header/LinkedList.h"
using namespace std;

template <class T>
struct LinkNode {
	T data;
	LinkNode<T>* link; //链指针域
	LinkNode(LinkNode<T>* ptr = NULL) {link = ptr;} //仅初始化指针成员的构造函数
	LinkNode(const T& item, LinkNode<T>* ptr = NULL)
	{
		data = item;
		link = ptr;
	}
};

template <class T>
class List:public LinearList<T>
{
public:
	List(){first = new LinkNode<T>;}
	List(const T& x){first = new LinkNode<T>(x);}
	List(List<T>& L);
	~List(){makeEmpty();}
	void makeEmpty();
	int Length()const;
	LinkNode<T> * getHead()const{return first;}
	LinkNode<T>* Search(T x);
	LinkNode<T>* Locate(int i);
	bool getData(int i, T& x)const;
	void setData(int i, T& x);
	bool Insert(int i, T& x);
	bool Remove(int i, T& x);
	bool IsEmpty()const
	{
		return first->link == NULL ? true:false;
	}
	bool IsFull()const
	{
		return false;
	}
	void Sort();
	void input();
	void output();
	List<T> & operator = (List<T>& L);
protected:
	LinkNode<T> * first;  //链表的头指针
};
#endif /* HEADER_LINKEDLIST_H_ */
