#include "leetcode.h"
#include <sstream>

/*Search a 2D Matrix II */

class Solution {
public:
	bool searchMatrix(vector<vector<int> >& matrix, int target) {
		int r = 0, c = 0;
		if (!matrix.size())
			return false;
		r = matrix.size();
		c = matrix[0].size();
		int min = (r >= c) ? c : r;
		int rbegin = 0, cbegin = 0, i_r = 0, j_c = 0, x = 0;
		while (rbegin < r || cbegin < c) {
			x = 0;
			while (x < min) {
				cout<<"cbegin="<<cbegin<<"\trbegin="<<rbegin<<"\tmin="<<min<<"\tx="<<x<<"\t i_r="<<i_r<<"\t j_c="<<j_c<<"\t i_r+x="<<i_r+x<<"\t j_c+x="<<j_c+x<<"\t matrix[i_r + x][j_c + x]="<<matrix[i_r + x][j_c + x]<<endl;
				if (matrix[i_r + x][j_c + x] > target) {
					int low = 0, high = x, middle = 0;
					while (low <= high) {
						middle = (low + high) / 2;
						cout<<matrix[i_r + x][j_c + middle]<<" middle="<<middle<<endl;
						if (matrix[i_r + x][j_c + middle] > target) {
							high = middle - 1;
						} else if (matrix[i_r + x][j_c + middle] < target) {
							low = middle + 1;
						} else if (matrix[i_r + x][j_c + middle] == target
								|| matrix[i_r + middle][j_c + x] == target) {
							return true;
						}
					}
					low = 0, high = x, middle = 0;
					while (low <= high) {
						middle = (low + high) / 2;
						cout<<matrix[i_r + middle][j_c + x] <<" middle="<<middle<<endl;
						if (matrix[i_r + middle][j_c + x] > target) {
							high = middle - 1;
						} else if (matrix[i_r + middle][j_c + x] < target) {
							low = middle + 1;
						} else if (matrix[i_r + middle][j_c + x] == target) {
							return true;
						}
					}
				} else if (matrix[i_r + x][j_c + x] == target) {
					return true;
				}
				x++;
			}
			rbegin += min;
			cbegin += min;
			if (r > rbegin) {
				min = (r - rbegin) >= c ? c : (r - rbegin);
				i_r = rbegin;
				j_c = 0;
			}
			if (cbegin < c) {
				min = (c - cbegin) >= r ? r : (c - cbegin);
				i_r = 0;
				j_c = cbegin;
			}
		}
		return false;
	}
};

int main() {
	Solution * s = new Solution();
	vector<vector<int> > matrix;
	vector<int> v_in;
	int arr1[] = { -1, 4, 7, 11, 15 };
//	int arr2[] = { 2, 5, 8, 12, 19 };
//	int arr3[] = { 3, 6, 9, 16, 22 };
//	int arr4[] = { 10, 13, 14, 17, 24 };
//	int arr5[] = { 18, 21, 23, 26, 30 };
//	int arr1[] = { 1, 2, 3, 4, 5 };
//	int arr2[] = { 6, 7, 8, 9, 10 };
//	int arr3[] = { 11, 12, 13, 14, 15 };
//	int arr4[] = { 16, 17, 18, 19, 20 };
//	int arr5[] = { 21, 22, 23, 24, 25 };
	for (int j = 0; j < sizeof(arr1) / sizeof(int); j++) {
		v_in.push_back(arr1[j]);
	}
	matrix.push_back(v_in);
//	v_in.clear();
//	for (int j = 0; j < sizeof(arr2) / sizeof(int); j++) {
//		v_in.push_back(arr2[j]);
//	}
//	matrix.push_back(v_in);
//	v_in.clear();
//	for (int j = 0; j < sizeof(arr3) / sizeof(int); j++) {
//		v_in.push_back(arr3[j]);
//	}
//	matrix.push_back(v_in);
//	v_in.clear();
//	for (int j = 0; j < sizeof(arr4) / sizeof(int); j++) {
//		v_in.push_back(arr4[j]);
//	}
//	matrix.push_back(v_in);
//	v_in.clear();
//	for (int j = 0; j < sizeof(arr5) / sizeof(int); j++) {
//		v_in.push_back(arr5[j]);
//	}
//	matrix.push_back(v_in);
	cout << s->searchMatrix(matrix, 5) << endl;
	cout << s->searchMatrix(matrix, 20) << endl;
	return 0;
}
