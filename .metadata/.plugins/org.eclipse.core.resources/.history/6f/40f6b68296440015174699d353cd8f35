/*
 * LeetCode005.cpp
 *
 *  Created on: 2015年8月4日
 *      Author: juanecho
 */
#include "leetcode.h"

class Solution {
public:
	int subMaxProfit(vector<int>& prices) {
			int size = prices.size();
			if (size <= 1)
				return 0;
			int min = prices[0], minIndex = 0;
			int max = 0, maxBegin = 0, maxEnd = 0;
			int i = 1;
			while (i < size) {
				if (prices[i] - min >= max) {
					maxBegin = minIndex;
					max = prices[i] - min;
					maxEnd = i;
				}
				if (prices[i] <= min) {
					min = prices[i];
					minIndex = i;
				}
				i++;
			}
			return max;
	}

	int maxProfit(vector<int>& prices) {
		vector<int> left, right;
		int size = prices.size();
		int i = 0, max = 0;
		while( i < size){

		}
	}
};

int main() {
	Solution * s = new Solution();
	vector<int> tem;
	int nums[] = { 1,2};//8, 3};//, 6, 2, 8, 8, 8, 4, 2, 0, 7, 2, 9, 4, 9 };
	for (int i = 0; i < 4; i++) {
		tem.push_back(nums[i]);
	}
	cout << s->maxProfit(tem) << endl;
	return 0;
}
