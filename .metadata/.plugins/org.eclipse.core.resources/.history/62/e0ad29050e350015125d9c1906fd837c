/*
 * SeqQueue.h
 *
 *  Created on: 2015年7月28日
 *      Author: juanecho
 */

#ifndef HEADER_SEQQUEUE_H_
#define HEADER_SEQQUEUE_H_
#include "Queue.h"
template <typename T>
class SeqQueue:public Queue<T>
{
public:
	SeqQueue(int sz = 10);
	~SeqQueue(){delete[] elements;}
	bool EnQueue(const T& x);
	//若堆列不满，则将x入队，否则溢出
	bool  DeQueue(T& x);
	void makeEmpty()
	{
		front = rear = 0;
	}
	bool getFront(T& x);
	bool IsEmpty()const
	{
		return (front == rear)?true:false;
	}
	bool IsFull()const
	{
		return ((rear+1)%maxSize == front)?true:false;
	}
	int getSize()const
	{
		return (rear - front + maxSize)%maxSize;
	}
	friend ostream& operator<<(ostream& os,SeqQueue<T> s);
private:
	int rear, front;
	T* elements;
	int maxSize;
};

template <typename T>
SeqQueue<T>::SeqQueue(int sz):front(0),rear(0),maxSize(sz)
{
	elements = new T[maxSize];
	assert(elements!= NULL);
}
template <typename T>
bool SeqQueue<T>::EnQueue(const T& x)
{
	if(IsFull() == true)
		return false;
	elements[rear] = x;
	rear = (rear+1)%maxSize;
	return true;
}
template <typename T>
bool SeqQueue<T>::DeQueue(T& x)
{
	if(IsEmpty() == true)
		return false;
	x = elements[front];
	front = (front+1)%maxSize;
	return true;
}
template <typename T>
bool SeqQueue<T>::getFront(T &x)
{
	if(IsEmpty() == true)
			return false;
		x = elements[front];
		return true;
}
template <typename T>
ostream& operator<<(ostream& os,SeqQueue<T>q)
{
	os<<"front="<<q.front<<",rear="<<q.rear<<endl;
	for(int i = front; i != rear; i = (i + 1)%maxSize)
		os<<i<<":"<<q.elements[i]<<endl;
	return os;
}
#endif /* HEADER_SEQQUEUE_H_ */
