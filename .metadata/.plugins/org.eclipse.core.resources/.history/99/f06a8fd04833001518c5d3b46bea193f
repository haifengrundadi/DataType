#ifndef SEQLIST_H
#define SEQLIST_H
#include<iostream>
#include<stdlib.h>
#include <linearlist.h>
const int defaultSize = 100;
template <class T>
class SeqList: public LinearList<T>
{
    protected:
        T * data; //存放数组
        int maxSize; //最大可容纳表项的项数
        int last; //当前已存表项的最后位置（从o开始）
        void reSize(int newSize); //改变data数组空间的大小

    public:
        SeqList(int sz = defaultSize);          //构造函数
        SeqList(SeqList<T>& L);                  //复制构造函数
        ~SeqList(){delete[] data;}               //析构函数
        int Size()const{return maxSize;}   //计算表最大可容纳表项个数
        int Length()const{return last+1;} //计算表的长度
        int Search(T& x) const ;                 //在表中搜索给定值
        int Locate(int i) const;                   //在表中定位第i个元素的位置
        bool getData(int i, T& x) const      //取第i个表象的值
        {
            if(i > 0 && i < last+1)
            {
                x = data[i-1];
                return true;
            }else
            {
                return false;
            }
        };
        void setData(int i, T& x)            //修改第i个表项的值为x
        {
           if(i > 0 && i < last+1)
            {
                data[i-1] = x;
            }
         };
        bool Insert(int i, T& x) ;              // 在第i个表项后插入x
        bool Remove(int i, T& x);            //删除第i个表项通过x返回
        bool IsEmpty()const                           //判断空
        {
            return (last == -1) ? true:false;
        };
        bool IsFull()const
        {
            return (last == maxSize -1) ? true:false;
        };
        void input();                                 //输入
        void output();                              //输出
        //SeqList<T> operator = (SeqList<T>& L) ; //复制
};

#endif // SEQLIST_H
