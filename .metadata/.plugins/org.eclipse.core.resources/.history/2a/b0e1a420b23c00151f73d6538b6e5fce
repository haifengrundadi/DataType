/*
 * LeetCode243.cpp
 *
 *  Created on: 2015年8月1日
 *      Author: juanecho
 */
#include<iostream>
#include<string>
using namespace std;
/*
 * Given a singly linked list, determine if it is a palindrome.
 * Follow up:
 * Could you do it in O(n) time and O(1) space?
 */
 struct ListNode {
   int val;
   ListNode *next;
   ListNode(int x) : val(x), next(NULL) {}
 };

class Solution {
public:
	/*bool isPalindrome(ListNode* head) {
		if(head == NULL) return false;
		bool flag = true;
		ListNode* first, tail;
		string str = "";
		first = head;
		while(head->next!=NULL)
		{
			head = head->next;
			str += head->val;
		}
		int i = 0,len = str.length();
		while( i < len)
		{
			if(str[i] == str[len-1])
			{
				i++;len--;
			}else
				return false;
		}
		return flag;
	}*/

	ListNode* creat(string str){
		ListNode *head,*first;
		int i = 0, len = str.length();
		if(len >= 1)
		{
			head = new ListNode(str[i]);
			first = head;
		}
		while((i+1)<len)
		{
			ListNode* listNode = new ListNode(str[i+1]);
			head->next = listNode;
			head = listNode;
			i++;
		}
		return first;
	}
};
int main()
{
	  Solution * s= new Solution();
	  ListNode * head = s->creat("12344321");
	  while(head!=NULL)
	  {
		  cout<<head->val<<endl;
		  head = head->next;
	  }
	  return 0;
}
