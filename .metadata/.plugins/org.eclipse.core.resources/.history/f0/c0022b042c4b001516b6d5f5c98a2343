/*
 * LeetCode235.cpp
 *
 *  Created on: 2015年8月3日
 *      Author: juanecho
 */

#include "leetcode.h"
#include <sstream>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 };

class Solution {
public:
	string to_string(int val){
		stringstream ss;
		ss<<val;
		string s=ss.str();
		return s;
	}

	void binaryTreePaths(vector<string>& ans, TreeNode* root, string t)
	{
		if(!root->left && !root->right){
			ans.push_back(t);
			return;
		}
		if(root->left) binaryTreePaths(ans, root->left, to_string(root->left->val));
		if(root->right) binaryTreePaths(ans, root->right, to_string(root->right->val));
	}
	vector<string> binaryTreePaths(TreeNode* root) {
		vector<string> ans;
		if(!root) return ans;
		binaryTreePaths(ans, root, to_string(root->val));
		return ans;
	}


	TreeNode* Creat( )
	{
		TreeNode* root;
		int ch;
		cout<<"请输入创建一棵二叉树的结点数据"<<endl;
	 	 cin>>ch;
	    if (ch==-1)
	    	root = NULL;
	    else
	    {
	    	 root = new TreeNode(ch);       //生成一个结点
	         root->left   =  Creat( );    //递归建立左子树
	         root->right = Creat( );    //递归建立右子树
	    }
	    return root;
	}

	void  output(TreeNode* root )
	{
	  if(root == NULL)
		  return;
	  cout<<root->val<<endl;
	  output(root->left);
	  output(root->right);
	}
};

int main()
{
	Solution * s = new Solution();
	vector<string> vstr;
	cout<<"output the tree--1"<<endl;
	TreeNode* root = s->Creat();
	vstr=s->binaryTreePaths(root);
	vector<string>::iterator it;
	cout<<"************"<<endl;
		for(it = vstr.begin(); it != vstr.end();it++){
			cout<<*it<<"\t";
		}
}

