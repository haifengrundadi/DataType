#include "leetcode.h"
#include <sstream>

/*Search a 2D Matrix II */

class Solution {
public:
	bool searchMatrix(vector<vector<int> >& matrix, int target) {
		int m = matrix.size();
		int n = matrix[0].size();
		int low = 0, high = n - 1, middle = 0, row = 0, col = 0;
		while (low <= high) {
			middle = (low + high) / 2;
			if (target > matrix[0][middle]) {
				low = middle + 1;
			} else if (target < matrix[0][middle]) {
				high = middle - 1;
			} else
				return true;
		}
		row = low >= high ? high : low;
		if(row < 0) row =0;
		low = 0;
		high = m - 1;
		middle = 0;
		while (low <= high) {
			middle = (low + high) / 2;
			if (target > matrix[middle][row]) {
				low = middle + 1;
			} else if (target < matrix[middle][row]) {
				high = middle - 1;
			} else
				return true;
		}
		//col
		low = 0;
		high = m - 1;
		middle = 0;
		while (low <= high) {
			middle = (low + high) / 2;
			if (target > matrix[middle][0]) {
				low = middle + 1;
			} else if (target < matrix[middle][0]) {
				high = middle - 1;
			} else
				return true;
		}
		col = low >= high ? high : low;
		if(col < 0) col =0;
		low = 0;
		high = n - 1;
		middle = 0;
		while (low <= high) {
			middle = (low + high) / 2;
			if (target > matrix[col][middle]) {
				low = middle + 1;
			} else if (target < matrix[col][middle]) {
				high = middle - 1;
			} else
				return true;
		}
		return false;
	}
};

int main() {
	Solution * s = new Solution();
	vector<vector<int> > matrix;
	vector<int> v_in;
	int arr1[] = { -5};
//			, 2, 3, 4, 5 };
//	int arr2[] = { 2, 5, 8, 12, 19 };
//	int arr3[] = { 3, 6, 9, 16, 22 };
//	int arr4[] = { 10, 13, 14, 17, 24 };
//	int arr5[] = { 18, 21, 23, 26, 30 };
//	int arr1[] = { 1, 2, 3, 4, 5 };
//	int arr2[] = { 6, 7, 8, 9, 10 };
//	int arr3[] = { 11, 12, 13, 14, 15 };
//	int arr4[] = { 16, 17, 18, 19, 20 };
//	int arr5[] = { 21, 22, 23, 24, 25 };
	for (int j = 0; j < sizeof(arr1) / sizeof(int); j++) {
		v_in.push_back(arr1[j]);
	}
	matrix.push_back(v_in);
//	v_in.clear();
//	for (int j = 0; j < sizeof(arr2) / sizeof(int); j++) {
//		v_in.push_back(arr2[j]);
//	}
//	matrix.push_back(v_in);
//	v_in.clear();
//	for (int j = 0; j < sizeof(arr3) / sizeof(int); j++) {
//		v_in.push_back(arr3[j]);
//	}
//	matrix.push_back(v_in);
//	v_in.clear();
//	for (int j = 0; j < sizeof(arr4) / sizeof(int); j++) {
//		v_in.push_back(arr4[j]);
//	}
//	matrix.push_back(v_in);
//	v_in.clear();
//	for (int j = 0; j < sizeof(arr5) / sizeof(int); j++) {
//		v_in.push_back(arr5[j]);
//	}
//	matrix.push_back(v_in);
	cout << s->searchMatrix(matrix, 1) << endl;
	cout << s->searchMatrix(matrix, -10) << endl;
	return 0;
}
