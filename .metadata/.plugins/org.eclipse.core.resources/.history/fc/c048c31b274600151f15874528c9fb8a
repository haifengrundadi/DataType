#include "leetcode.h"

class Solution {
public:
	vector<vector<int> > threeSum(vector<int>& nums) {
		vector<vector<int> > v;
		int size = nums.size();
		if(size <= 2) return v;
		vector<int> v_in;
		map<int, int> m;
		vector<int>::iterator it;
//		map <int, int>::iterator m1_Iter;
		for(it = nums.begin(); it != nums.end(); it++){
			 if(m.find(*it) == m.end()){
				 m.insert(pair<int,int>(*it, 1));
			 }else{
				 m.find(*it)->second += 1;
			 }
		}
//		for ( m1_Iter = m.begin( ); m1_Iter != m.end( ); m1_Iter++ ){
//		      cout <<  m1_Iter->first<<" "<<m1_Iter->second<<endl;
//		}
		int i = 0, j = size - 1,tem = 0;
		while(i < j){
			if(m[i] > 0 || m[j] < 0)	break;
			tem = m[i] + m[j];
			if(tem > 0 &&  m.find(tem) != m.end()){
				v_in.push_back(m[i]);
				v_in.push_back(tem);
				v_in.push_back(m[j]);
			}else if(tem < 0 && m.find(tem) != m.end()){
				v_in.push_back(m[i]);
				v_in.push_back(tem);
				v_in.push_back(m[j]);
			}
			v.push_back(v_in);
			v_in.clear();
			i++;
			j--;
		}
		return v;
	}
};

int main(){
	Solution *s = new Solution();
	vector<vector<int> > v;
	vector<int> nums;
	int arr[] = {-1,0,1,2,-1,-4};
	for(int i =0; i < sizeof(arr)/ sizeof(int); i++){
		nums.push_back(arr[i]);
	}
	v = s->threeSum(nums);
	int size = v.size();
	vector<int>::iterator it;
	for(int i =0; i < size;i++){
		for(int j = 0 ; j < v[i].size();j++){
			cout<<v[i][i]<<"\t";
		}
		cout<<endl;
	}
}
