/*
 * List.h
 *
 *  Created on: 2015年8月1日
 *      Author: juanecho
 */

#ifndef HEADER_LIST_H_
#define HEADER_LIST_H_
#include<iostream>
using namespace std;

template <class T>
struct LinkNode{
	T data;
	LinkNode<T> *link;
	LinkNode(LinkNode<T> *ptr = NULL){link = ptr;}
	LinkNode(const T& item, LinkNode<T> *ptr = NULL)
	{
		data = item;
		link = ptr;
	}
};

template <class T>
class List:public LinearList<T>
{
public:
	List(){first = new LinkNode<T>;}
	List(const T& x){ first = new LinkNode<T>(x);}
	List(List<T>& L);//复制构造函数
	~List(){makeEmpty();}
	void makeEmpty();
	int Length()const;
	LinkNode<T> * getHead()const{return first;}
	LinkNode<T>* Search(T x);
	LinkNode<T>* Locate(int i);
	bool getData(int i,T& x)const;
	void setData(int i, T& x);//修改第i个元素的值
	bool Insert(int i,T& x);//在i之后插入x
	bool Remove(int i,T& x);
	bool IsEmpty()const
	{
		return first->link == NULL?true:false;
	}
	bool IsFull()const{return false;}
	void Sort();
	void input();
	void output();
	List<T>& operator==(List<T>& L);
protected:
	LinkNode<T>* first;
};



#endif /* HEADER_LIST_H_ */
