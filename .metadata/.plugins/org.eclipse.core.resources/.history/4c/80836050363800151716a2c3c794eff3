/*
 * LeetCode21.cpp
 *
 *  Created on: 2015年7月28日
 *      Author: juanecho
 */

#include <iostream>
using namespace std;
 struct ListNode {
      int val;
      ListNode *next;
      ListNode(int x) : val(x), next(NULL) {}
  };

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2)
    {
    	if(l1 ==NULL)
        	return l2;
        if(l2 == NULL)
        	return l1;
        ListNode* firstOfList;
        ListNode* current = l2;
        if(l1->val >= l2->val)
        	firstOfList = l2;
        else
        {
        	firstOfList = l1;
        	l1= l2;
        	l2 = firstOfList;
        }
        while(l1 != NULL && l2 != NULL)
        {
			while(l1->val >= l2->val)
			{
				if(l2->next == NULL)
				{
					l2->next = l1;
					return firstOfList;
				}
				current = l2;
				l2 = l2->next;
			}
			l1->next = current->next;
			current->next = l1;
			current = l1;
			l1 = l1->next;
        }
        return firstOfList;
    }
};

int main()
{
	Solution* s= new Solution();
	ListNode * arr1 = new ListNode[7];
	int i = 0;
	for( i = 0; i < 6;i++)
	{
		arr1[i] = new ListNode(i);
		arr1[i].next = arr1[i+1];
	}
	arr1[i] = new ListNode(i);
	arr1[i].next = NULL;
	ListNode * arr2= new ListNode(i);
	arr2->next = NULL;
	ListNode * n = s->mergeTwoLists(arr1,arr2);
	while(n->next != NULL)
	{
		cout<<n->val<<"\t";
	}
	return 0;
}


